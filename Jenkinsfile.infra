pipeline {
    agent any

    environment {
        AWS_REGION = 'us-west-2' 
        EKS_CLUSTER_NAME = 'my-eks-cluster' 
        TF_VAR_access_key = credentials('aws-access-key-id')
        TF_VAR_secret_key = credentials('aws-secret-access-key')
        TERRAFORM_DIR = 'terraform' // Directory where Terraform files are located
        KUBECONFIG = credentials('kubeconfig') // Jenkins secret containing kubeconfig
    }

stages {
        stage('Checkout Code') {
            steps {
                // Checkout the code from the specified repository
                checkout scm
            }
        }

        stage('Setup Terraform') {
            steps {
                script {
                    // Initialize Terraform
                    dir("${TERRAFORM_DIR}") {
                        sh '''
                        terraform init
                        terraform plan
                        '''
                    }
                }
            }
        }

        stage('Apply Terraform') {
            steps {
                script {
                    // Apply Terraform configuration
                    dir("${TERRAFORM_DIR}") {
                        sh '''
                        terraform apply -auto-approve
                        '''
                    }
                }
            }
        }

        stage('Update Kubeconfig') {
            steps {
                script {
                    // Update Kubernetes config to access the cluster
                    sh '''
                    aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}
                    '''
                }
            }
        }

        stage('Verify Cluster') {
            steps {
                script {
                    // Verify Kubernetes access and resources
                    sh '''
                    kubectl auth can-i "*" "*"
                    kubectl get nodes
                    kubectl get pods -n kube-system
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Infrastructure provisioning failed!'
        }
        success {
            echo 'Infrastructure has been successfully provisioned and configured!'
        }
    }
}

